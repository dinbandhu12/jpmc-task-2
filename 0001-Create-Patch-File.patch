From dda1873ade79379479086441756a2d71569cee4f Mon Sep 17 00:00:00 2001
From: dinbandhu12 <dinbandhu8445@gmail.com>
Date: Mon, 16 Jan 2023 13:05:50 +0530
Subject: [PATCH] Create Patch File

---
 src/App.tsx   | 20 +++++++++++++++++---
 src/Graph.tsx |  5 +++++
 2 files changed, 22 insertions(+), 3 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..a595e05 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,19 +31,31 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if(this.state.showGraph) {
+      return (<Graph data={this.state.data}/>)
+    }    
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
+    let x = 0;
+    const interval = setInterval(() => {
     DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
+      this.setState({ 
+        data: serverResponds,
+        showGraph: true,
+      });
     });
-  }
+    x++;
+    if(x > 1000) {
+      clearInterval(interval);
+    }
+  }, 100);
+}
 
   /**
    * Render the App react component
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..c3ce31d 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -49,6 +49,11 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates', `{ "stock": "distinct count", "top_ask_price": "avg", "top_bid_price": "avg", "timestamp": "distinct count" }`);
     }
   }
 
-- 
2.37.2.windows.2

